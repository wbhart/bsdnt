#!/bin/bash

# Copyright (c):
# * William Hart 2010, 2013. All rights reserved.
# * Antony Vennard 2010. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#  
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


# BSDNT UNIX Build System.


AS="gcc"
ASFILES=
AR="ar"
CC="gcc"
AFLAGS=""
CFLAGS="-pedantic -O2 -g -Wall"
OS=`uname -s`

case "$OS" in
   CYGWIN* | MINGW*)
      PIC_FLAG="";;
   *)
      PIC_FLAG="-fPIC";;
esac

# Header 
echo "BSDNT Unix Build Script."
echo "BSDNT is a BSD-Licensed BigNum Library."
echo "BSDNT is Copyright (C) its contributors. See LICENSE."
echo "====================================================="

create_config_h()
{
    WANT_ASSERT=0
    WANT_REDZONES=1

    while test "$1" != "" ; do
	if test "$1" = "-assert"
        then
           WANT_ASSERT=1
        fi
        if test "$1" = "-noredzones"
        then
           WANT_REDZONES=0
        fi
        shift
    done
    
    echo "#define WANT_ASSERT ${WANT_ASSERT}" > config.h
    echo "#define WANT_REDZONES ${WANT_REDZONES}" >> config.h
    
    echo "#define IS_LITTLE_ENDIAN 0x10" >> config.h
    echo "#define IS_BIG_ENDIAN 0x20" >> config.h

    $CC arch/endian.c -o endian
        ENDIAN=`./endian`
        case $ENDIAN in
        little)
            echo "#define PLATFORM_BYTE_ORDER IS_LITTLE_ENDIAN" >> config.h;;
        big)
            echo "#define PLATFORM_BYTE_ORDER IS_BIG_ENDIAN" >> config.h;;
        *)
	    echo "#error Machine must be either big or little endian!" >> config.h;;
	esac
}

arch_handler()
{
    # Set Architecture
    ARCH=`uname -m`

    case $ARCH in
    x86_64 | amd64)
       MACHINE="x86_64";;
    x86 | i*86 | pc)
       MACHINE="x86";;
    *)
       MACHINE="unknown";;
    esac

    # Create ARCH headers. 

    echo "" > helper_arch.h

    if [ $MACHINE = "x86" -o $MACHINE = "x86_64" ]
    then
	$CC arch/cpuid.c -o cpuid 
        ARCH=`./cpuid`
        case $ARCH in
        k10)
            EXTS="_k10 _k8";;
        k102)
            EXTS="_k102 _k10 _k8";;
        k103)
            EXTS="_k103 _k102 _k10 _k8";;
        bobcat)
            EXTS="_bobcat _k10 _k8";;
        bulldozer)
            EXTS="_bulldozer _k10 _k8";;
        k8)
            EXTS="_k8";;
        atom)
            EXTS="_atom";;
        nehalem)
            EXTS="_nehalem _core2";;
        westmere)
            EXTS="_iwestmere _core2";;
        sandybridge)
            EXTS="_sndybridge _core2";;
        core2)
            EXTS="_core2";;
        p4)
            EXTS="_p4";;
        * | x86)
            EXTS="";;
        esac

        if [ $MACHINE = "x86_64" ]
        then
            ASFLAGS="-felf64"
        elif [ $MACHINE = "x86" ]
        then
            ASFLAGS="-felf32"
        fi

        for file in nn*.c
        do
            name=${file%\.*}
            #echo "   Writing ${name}_arch.h"
            echo "#ifndef ${name}_H" > ${name}_arch.h
            echo "#define ${name}_H" >> ${name}_arch.h
            for ext in $EXTS
            do
                hname=arch/inline/$name"_"$MACHINE$ext.h
                if [ -f $hname ]
                then
                    echo "#include \"${hname}\"" >> ${name}_arch.h
                fi
                hname=arch/inline/$name"_"$MACHINE.h
                if [ -f $hname ]
                then
                    echo "#include \"${hname}\"" >> ${name}_arch.h
                fi
            done
            echo "#endif" >> ${name}_arch.h
        done
    fi

    if [ $MACHINE = "unknown" ]
    then
        for file in nn*.c
        do
           name=${file%\.*}
           echo "#ifndef ${name}_H" > ${name}_arch.h
           echo "#define ${name}_H" >> ${name}_arch.h
           echo "#endif" >> ${name}_arch.h
        done
    fi

}

fill_makefile_wireframe()
{
    echo "Examining source"

    CFILESARR=`ls -1 *.c rand/*.c`
    HFILESARR=`ls -1 *.h`
    TFILESARR=`ls -1 test/t-*.c`
    PFILESARR=`ls -1 profile/p-*.c`

    for C in `echo ${CFILESARR[*]}`;
    do
        CFILES="$CFILES $C"
    done

    for H in `echo ${HFILESARR[*]}`;
    do
        HFILES="$HFILES $H"
    done

    for T in `echo ${TFILESARR[*]}`;
    do
        TFILES="$TFILES $T"
    done

    for P in `echo ${PFILESARR[*]}`;
    do
        PFILES="$PFILES $P"
    done

    echo "Creating Makefile "

    cp -f Makefile.unix Makefile
}


sed_makefile()
{
    sed "s|__ASSEMBLER__|${AS}|g" Makefile > Makefile.tmp
    sed "s|__ARCHIVE__|${AR}|g" Makefile.tmp > Makefile
    sed "s|__COMPILER__|${CC}|g" Makefile > Makefile.tmp
    sed "s|__AFLAGS__|${ASFLAGS}|g" Makefile.tmp > Makefile
    sed "s|__CFLAGS__|${CFLAGS} ${PIC_FLAG}|g" Makefile > Makefile.tmp
    sed "s|__ASFILES__|${ASFILES}|g" Makefile.tmp > Makefile
    sed "s|__SOURCES__|${CFILES}|g" Makefile > Makefile.tmp
    sed "s|__HEADERS__|${HFILES}|g" Makefile.tmp > Makefile
    sed "s|__TSOURCES__|${TFILES}|g" Makefile > Makefile.tmp
    sed "s|__TESTS__|${TESTS}|g" Makefile.tmp > Makefile
    sed "s|__PSOURCES__|${PFILES}|g" Makefile > Makefile.tmp
    sed "s|__BINARIES__|${BINARIES}|g" Makefile.tmp > Makefile
    sed "s|__LIBRARIES__|${LIBRARIES}|g" Makefile > Makefile.tmp
    mv Makefile.tmp Makefile
}


make_directory_structure()
{
    mkdir -p build/arch
    mkdir -p build/rand
    mkdir -p build/test
    mkdir -p build/profile
    mkdir -p dist/lib
}

create_types_arch_h()
{
    echo "" >> types_arch.h
}

create_config_h $@
arch_handler
fill_makefile_wireframe
sed_makefile
make_directory_structure
create_types_arch_h

echo "Done. "
echo " "
echo "Type make to build this library. We strongly recommend you run "
echo "make check and ensure all tests pass."

exit 0
